@page "/productos"
@rendermode InteractiveServer
@using TiendaMaquillajeApp.Data
@inject IProductoService ProductoService
@inject NavigationManager Navigation

<h3>Lista de productos</h3>

<!-- Formulario para agregar nuevos productos -->
<div class="card mb-4">
    <div class="card-header">
        <h4>Agregar Nuevo Producto</h4>
    </div>
    <div class="card-body">
        <form @onsubmit="AgregarProducto">
            <div class="form-group mb-3">
                <label for="nombre">Nombre:</label>
                <input id="nombre" @bind="nuevoProducto.Nombre" class="form-control" required />
            </div>
            <div class="form-group mb-3">
                <label for="precio">Precio:</label>
                <input id="precio" type="number" step="0.01" @bind="nuevoProducto.Precio" class="form-control" required />
            </div>
            <div class="form-group mb-3">
                <label for="stock">Stock:</label>
                <input id="stock" type="number" @bind="nuevoProducto.Stock" class="form-control" required />
            </div>
            <button type="submit" class="btn btn-primary">Agregar Producto</button>
        </form>
    </div>
</div>

@if (productos == null)
{
    <p><em>Cargando productos...</em></p>
}
else if (!productos.Any())
{
    <p>No hay productos disponibles.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Nombre</th>
                <th>Precio</th>
                <th>Stock</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var producto in productos)
            {
                <tr>
                    @if (productoEditando?.IdProducto == producto.IdProducto)
                    {
                        <td><input @bind="productoEditando.Nombre" class="form-control" /></td>
                        <td><input type="number" step="0.01" @bind="productoEditando.Precio" class="form-control" /></td>
                        <td><input type="number" @bind="productoEditando.Stock" class="form-control" /></td>
                        <td>
                            <button class="btn btn-success btn-sm" @onclick="() => GuardarCambios(productoEditando)">Guardar</button>
                            <button class="btn btn-secondary btn-sm" @onclick="CancelarEdicion">Cancelar</button>
                        </td>
                    }
                    else
                    {
                        <td>@producto.Nombre</td>
                        <td>@producto.Precio.ToString("C")</td>
                        <td>@producto.Stock</td>
                        <td>
                            <button class="btn btn-primary btn-sm" @onclick="() => EditarProducto(producto)">Editar</button>
                            <button class="btn btn-danger btn-sm" @onclick="() => ConfirmarEliminar(producto.IdProducto)">Eliminar</button>
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
}

@if (mostrarConfirmacion)
{
    <div class="modal" style="display:block" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirmar eliminación</h5>
                </div>
                <div class="modal-body">
                    <p>¿Estás seguro de que deseas eliminar este producto?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" @onclick="EliminarProducto">Sí, eliminar</button>
                    <button type="button" class="btn btn-secondary" @onclick="CancelarEliminar">Cancelar</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Producto>? productos;
    private Producto? productoEditando;
    private Producto nuevoProducto = new Producto();
    private bool mostrarConfirmacion = false;
    private int idProductoAEliminar;

    protected override async Task OnInitializedAsync()
    {
        await CargarProductos();
    }

    private async Task CargarProductos()
    {
        productos = await ProductoService.ObtenerProductosAsync();
        StateHasChanged();
    }

    private async Task AgregarProducto()
    {
        await ProductoService.AgregarProductoAsync(nuevoProducto);
        nuevoProducto = new Producto();
        await CargarProductos();
    }

    private void EditarProducto(Producto producto)
    {
        productoEditando = new Producto
            {
                IdProducto = producto.IdProducto,
                Nombre = producto.Nombre,
                Precio = producto.Precio,
                Stock = producto.Stock
            };
    }

    private async Task GuardarCambios(Producto producto)
    {
        await ProductoService.ActualizarProductoAsync(producto);
        productoEditando = null;
        await CargarProductos();
    }

    private void CancelarEdicion()
    {
        productoEditando = null;
    }

    private void ConfirmarEliminar(int id)
    {
        idProductoAEliminar = id;
        mostrarConfirmacion = true;
    }

    private async Task EliminarProducto()
    {
        mostrarConfirmacion = false;
        await ProductoService.EliminarProductoAsync(idProductoAEliminar);
        await CargarProductos();
    }

    private void CancelarEliminar()
    {
        mostrarConfirmacion = false;
    }
}