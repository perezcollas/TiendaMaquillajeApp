@page "/productos"
@rendermode InteractiveServer
@using TiendaMaquillajeApp.Data
@inject IProductoService ProductoService

<h3>Lista de productos</h3>

@if (productos == null)
{
    <p>Cargando productos...</p>
}
else if (!productos.Any())
{
    <p>No hay productos disponibles.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Nombre</th>
                <th>Precio</th>
                <th>Stock</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var producto in productos)
            {
                if (productoEditando?.IdProducto == producto.IdProducto)
                {
                    <tr>
                        <td><input @bind="productoEditando.Nombre" class="form-control" /></td>
                        <td><input type="number" @bind="productoEditando.Precio" class="form-control" /></td>
                        <td><input type="number" @bind="productoEditando.Stock" class="form-control" /></td>
                        <td>
                            <button class="btn btn-success btn-sm" @onclick="() => GuardarCambios(productoEditando)">Guardar</button>
                            <button class="btn btn-secondary btn-sm" @onclick="CancelarEdicion">Cancelar</button>
                        </td>
                    </tr>
                }
                else
                {
                    <tr>
                        <td>@producto.Nombre</td>
                        <td>@producto.Precio</td>
                        <td>@producto.Stock</td>
                        <td>
                            <button class="btn btn-primary btn-sm" @onclick="() => EditarProducto(producto)">Editar</button>
                            <button class="btn btn-danger btn-sm" @onclick="() => EliminarProducto(producto.IdProducto)">Eliminar</button>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
}

@code {
    private List<Producto>? productos;
    private Producto? productoEditando;

    protected override async Task OnInitializedAsync()
    {
        productos = await ProductoService.ObtenerProductosAsync();
    }

    private void EditarProducto(Producto producto)
    {
        productoEditando = new Producto
            {
                IdProducto = producto.IdProducto,
                Nombre = producto.Nombre,
                Precio = producto.Precio,
                Stock = producto.Stock
            };
    }

    private async Task GuardarCambios(Producto producto)
    {
        await ProductoService.ActualizarProductoAsync(producto);
        productoEditando = null;
        productos = await ProductoService.ObtenerProductosAsync();
    }

    private void CancelarEdicion()
    {
        productoEditando = null;
    }

    private async Task EliminarProducto(int id)
    {
        await ProductoService.EliminarProductoAsync(id);
        productos = await ProductoService.ObtenerProductosAsync();
    }
}