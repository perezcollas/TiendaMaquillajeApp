@page "/ventas"
@using TiendaMaquillajeApp.Data
@inject IVentaService VentaService
@inject IClienteService ClienteService
@inject IProductoService ProductoService

@rendermode InteractiveServer

<h3>Lista de Ventas</h3>

@if (ventas == null || clientes == null || productos == null)
{
    <p>Cargando datos...</p>
}
else
{
    <EditForm Model="nuevaVenta" OnValidSubmit="@(esEdicion ? EditarVenta : AgregarVenta)">
        <h4>@(esEdicion ? "Editar Venta" : "Agregar Nueva Venta")</h4>

        <div class="mb-3">
            <label>Cliente:</label>
            <select @bind="nuevaVenta.IdCliente" class="form-select">
                <option value="">Seleccione Cliente</option>
                @foreach (var cliente in clientes)
                {
                    <option value="@cliente.IdCliente">@cliente.Nombre</option>
                }
            </select>
        </div>

        <div class="mb-3">
            <label>Producto:</label>
            <select @bind="_idProductoSeleccionado" class="form-select">
                <option value="">Seleccione Producto</option>
                @foreach (var producto in productos)
                {
                    <option value="@producto.IdProducto">@producto.Nombre</option>
                }
            </select>
            @if (productoSeleccionado != null)
            {
                <p>Precio: @productoSeleccionado.Precio</p>
                <p>Stock disponible: @productoSeleccionado.Stock</p>
            }
        </div>

        <div class="mb-3">
            <label>Cantidad:</label>
            <input type="number" @bind="nuevaVenta.Cantidad" @bind:event="oninput" class="form-control" @onchange="ActualizarTotal" />
        </div>

        <div class="mb-3">
            <label>Total:</label>
            <input type="number" class="form-control" value="@nuevaVenta.Total" readonly />
        </div>

        <button type="submit" class="btn btn-success me-2">@(esEdicion ? "Guardar Cambios" : "Agregar")</button>
        <button type="button" class="btn btn-secondary" @onclick="CancelarEdicion" hidden="@(esEdicion ? false : true)">Cancelar</button>

        @if (!string.IsNullOrEmpty(mensajeError))
        {
            <p class="text-danger mt-2">@mensajeError</p>
        }
    </EditForm>

    <table class="table mt-4">
        <thead>
            <tr>
                <th>Cliente</th>
                <th>Producto</th>
                <th>Fecha</th>
                <th>Cantidad</th>
                <th>Total</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var venta in ventas)
            {
                <tr>
                    <td>@venta.Cliente?.Nombre</td>
                    <td>@venta.Producto?.Nombre</td>
                    <td>@venta.FechaVenta.ToShortDateString()</td>
                    <td>@venta.Cantidad</td>
                    <td>@venta.Total</td>
                    <td>
                        <button class="btn btn-warning btn-sm me-1" @onclick="() => Editar(venta)">Editar</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => Eliminar(venta.IdVenta)">Eliminar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Venta>? ventas;
    private List<Cliente>? clientes;
    private List<Producto>? productos;
    private Producto? productoSeleccionado;
    private Venta nuevaVenta = new Venta { FechaVenta = DateTime.Today };
    private string? mensajeError;
    private bool esEdicion = false;

    private int _idProductoSeleccionado
    {
        get => nuevaVenta.IdProducto;
        set
        {
            nuevaVenta.IdProducto = value;
            productoSeleccionado = productos?.FirstOrDefault(p => p.IdProducto == value);
            ActualizarTotal();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await CargarDatos();
    }

    private async Task CargarDatos()
    {
        ventas = await VentaService.ObtenerVentasAsync();
        clientes = await ClienteService.ObtenerClientesAsync();
        productos = await ProductoService.ObtenerProductosAsync();
    }

    private void ActualizarTotal()
    {
        if (productoSeleccionado != null && nuevaVenta.Cantidad > 0)
        {
            nuevaVenta.Total = productoSeleccionado.Precio * nuevaVenta.Cantidad;
        }
        else
        {
            nuevaVenta.Total = 0;
        }
    }

    private async Task AgregarVenta()
    {
        mensajeError = null;
        if (productoSeleccionado == null)
        {
            mensajeError = "Por favor seleccione un producto.";
            return;
        }

        if (nuevaVenta.Cantidad > productoSeleccionado.Stock)
        {
            mensajeError = $"No hay suficiente stock disponible. Stock actual: {productoSeleccionado.Stock}";
            return;
        }

        nuevaVenta.FechaVenta = DateTime.Today;
        await VentaService.AgregarVentaAsync(nuevaVenta);
        await CargarDatos();

        nuevaVenta = new Venta { FechaVenta = DateTime.Today };
        productoSeleccionado = null;
    }

    private void Editar(Venta venta)
    {
        nuevaVenta = new Venta
        {
            IdVenta = venta.IdVenta,
            IdCliente = venta.IdCliente,
            IdProducto = venta.IdProducto,
            Cantidad = venta.Cantidad,
            FechaVenta = venta.FechaVenta,
            Total = venta.Total
        };
        _idProductoSeleccionado = venta.IdProducto;
        esEdicion = true;
    }

    private async Task EditarVenta()
    {
        if (productoSeleccionado == null)
        {
            mensajeError = "Por favor seleccione un producto.";
            return;
        }

        var ventaOriginal = ventas?.FirstOrDefault(v => v.IdVenta == nuevaVenta.IdVenta);
        var stockDisponible = productoSeleccionado.Stock + (ventaOriginal?.Cantidad ?? 0);
        if (nuevaVenta.Cantidad > stockDisponible)
        {
            mensajeError = "Cantidad excede stock disponible.";
            return;
        }

        await VentaService.EditarVentaAsync(nuevaVenta);
        await CargarDatos();

        nuevaVenta = new Venta { FechaVenta = DateTime.Today };
        productoSeleccionado = null;
        esEdicion = false;
    }

    private void CancelarEdicion()
    {
        nuevaVenta = new Venta { FechaVenta = DateTime.Today };
        productoSeleccionado = null;
        esEdicion = false;
        mensajeError = null;
    }

    private async Task Eliminar(int idVenta)
    {
        await VentaService.EliminarVentaAsync(idVenta);
        await CargarDatos();
    }
}
