@page "/ventas"
@using TiendaMaquillajeApp.Data
@inject IVentaService VentaService
@inject IClienteService ClienteService
@inject IProductoService ProductoService

@rendermode InteractiveServer

<h3>Lista de Ventas</h3>

@if (ventas == null || clientes == null || productos == null)
{
    <p>Cargando datos...</p>
}
else
{
    <EditForm Model="nuevaVenta" OnValidSubmit="AgregarVenta">
        <h4>Agregar Nueva Venta</h4>

        <div>
            <label>Cliente:</label>
            <select @bind="nuevaVenta.IdCliente" class="form-select">
                <option value="">Seleccione Cliente</option>
                @foreach (var cliente in clientes)
                {
                    <option value="@cliente.IdCliente">@cliente.Nombre</option>
                }
            </select>
        </div>

        <div>
            <label>Producto:</label>
            <select class="form-select" @bind="_idProductoSeleccionado">
                <option value="">Seleccione Producto</option>
                @foreach (var producto in productos)
                {
                    <option value="@producto.IdProducto">@producto.Nombre</option>
                }
            </select>
            @if (productoSeleccionado != null)
            {
                <p>Precio: @productoSeleccionado.Precio</p>
                <p>Stock disponible: @productoSeleccionado.Stock</p>
            }
        </div>

        <div>
            <label>Cantidad:</label>
            <input type="number" @bind="nuevaVenta.Cantidad" class="form-control" @oninput="CalcularTotal" />
        </div>

        <div>
            <label>Total:</label>
            <input type="number" value="@nuevaVenta.Total" class="form-control" readonly />
        </div>

        <button type="submit" class="btn btn-success">Agregar</button>
        @if (!string.IsNullOrEmpty(mensajeError))
        {
            <p style="color:red">@mensajeError</p>
        }
    </EditForm>

    <table class="table">
        <thead>
            <tr>
                <th>Cliente</th>
                <th>Producto</th>
                <th>Fecha</th>
                <th>Cantidad</th>
                <th>Total</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var venta in ventas)
            {
                <tr>
                    <td>@venta.Cliente?.Nombre</td>
                    <td>@venta.Producto?.Nombre</td>
                    <td>@venta.FechaVenta.ToShortDateString()</td>
                    <td>@venta.Cantidad</td>
                    <td>@venta.Total</td>
                    <td>
                        <button class="btn btn-danger btn-sm" @onclick="() => Eliminar(venta.IdVenta)">Eliminar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Venta>? ventas;
    private List<Cliente>? clientes;
    private List<Producto>? productos;
    private Producto? productoSeleccionado;
    private Venta nuevaVenta = new Venta { FechaVenta = DateTime.Today };
    private string? mensajeError;

    private int _idProductoSeleccionado
    {
        get => nuevaVenta.IdProducto;
        set
        {
            nuevaVenta.IdProducto = value;
            productoSeleccionado = productos.FirstOrDefault(p => p.IdProducto == value);
            CalcularTotal();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await CargarDatos();
    }

    private async Task CargarDatos()
    {
        ventas = await VentaService.ObtenerVentasAsync();
        clientes = await ClienteService.ObtenerClientesAsync();
        productos = await ProductoService.ObtenerProductosAsync();
    }

    private void CalcularTotal()
    {
        if (productoSeleccionado != null && nuevaVenta.Cantidad > 0)
        {
            nuevaVenta.Total = productoSeleccionado.Precio * nuevaVenta.Cantidad;
        }
        else
        {
            nuevaVenta.Total = 0;
        }
    }

    private async Task AgregarVenta()
    {
        mensajeError = null;
        if (productoSeleccionado == null)
        {
            mensajeError = "Por favor seleccione un producto.";
            return;
        }

        if (nuevaVenta.Cantidad > productoSeleccionado.Stock)
        {
            mensajeError = $"No hay suficiente stock disponible. Stock actual: {productoSeleccionado.Stock}";
            return;
        }

        nuevaVenta.FechaVenta = DateTime.Today;
        await VentaService.AgregarVentaAsync(nuevaVenta);

        // Actualizar stock en producto (opcional)
        productoSeleccionado.Stock -= nuevaVenta.Cantidad;
        await ProductoService.ActualizarProductoAsync(productoSeleccionado);

        nuevaVenta = new Venta { FechaVenta = DateTime.Today };
        productoSeleccionado = null;
        await CargarDatos();
    }

    private async Task Eliminar(int idVenta)
    {
        await VentaService.EliminarVentaAsync(idVenta);
        await CargarDatos();
    }
}
